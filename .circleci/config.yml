version: 2.1

# OVERVIEW - What this CI pipeline does:
# 1. build & test the SDK
# 2. build & test EHRbase w/ SDK (as local dependency)
# 3. conduct (static) code analysis w/ Sonar scanner and send results to sonarcloud.io
#    - this includes code coverage from unit & integration tests (written in Java)
# 4. run Robot integation tests (from EHRbase's repo)
# 5. publish git tag based snapshot & release versions on jitpack.io
#    - requires manually creating a release (via Github UI) from a given git tag
#    - jitpack will build related artifacts on demand

# QUALITY GATE I for fast feedback
# - builds and tests SDK as fast as possible for fast feedback
# - ehrbase build w/o any tests (mvn even doesn't compile any test code)
# - no Jacoco code instrumentation
# - no code coverage metrics and related storage/upload of artifacts
# - no Java Doc generation
# - needs less than 50% of time before Robot integration test can start than would be the case in Quality Gate 2

# QUALITY GATE II for indepth test and analysis
# - Jacoco code instrumentation enabled to get coverage metrics
# - ehrbase builds with tests enabled
# - Java docs generation enabled
# - Sonar code analysis enabled and results uploaded to sonarcloud.io
# - TODO: enable scheduled execution(?)
# - TODO: add security test suite(?)



workflows:

  # WORKFLOW 1/6) Build & Test the SDK
  QUALITY-GATE-I:
    jobs:
      - check-codestyle:
          context: org-global
          filters:
            branches:
              ignore:
                - /release\/.*/
                - master
                - /sync\/.*/
                - /feature/sync\/.*/
      - build-and-test-openEHR_SDK:
          filters:
            branches:
              ignore:
                - master
                - develop
                - release
                - /sync\/.*/
                - /feature/sync\/.*/

      - COMPOSITION-tests-1:
          context: org-global
          requires:
            - build-and-test-openEHR_SDK
          filters:
            branches:
              ignore:
                - master
                - develop
                - release
                - /sync\/.*/
                - /feature/sync\/.*/

      - COMPOSITION-tests-2:
          context: org-global
          requires:
            - build-and-test-openEHR_SDK
          filters:
            branches:
              ignore:
                - master
                - develop
                - release
                - /sync\/.*/
                - /feature/sync\/.*/

      - COMPOSITION-tests-3:
          context: org-global
          requires:
            - build-and-test-openEHR_SDK
          filters:
            branches:
              ignore:
                - master
                - develop
                - release
                - /sync\/.*/
                - /feature/sync\/.*/

      - COMPOSITION-tests-4:
          context: org-global
          requires:
            - build-and-test-openEHR_SDK
          filters:
            branches:
              ignore:
                - master
                - develop
                - release
                - /sync\/.*/
                - /feature/sync\/.*/

      - COMPOSITION-tests-5:
          context: org-global
          requires:
            - build-and-test-openEHR_SDK
          filters:
            branches:
              ignore:
                - master
                - develop
                - release
                - /sync\/.*/
                - /feature/sync\/.*/

      - CONTRIBUTION-tests:
          context: org-global
          requires:
            - build-and-test-openEHR_SDK
          filters:
            branches:
              ignore:
                - master
                - develop
                - release
                - /sync\/.*/
                - /feature/sync\/.*/

      - DIRECTORY-tests:
          context: org-global
          requires:
            - build-and-test-openEHR_SDK
          filters:
            branches:
              ignore:
                - master
                - develop
                - release
                - /sync\/.*/
                - /feature/sync\/.*/

      - EHRSERVICE-tests:
          context: org-global
          requires:
            - build-and-test-openEHR_SDK
          filters:
            branches:
              ignore:
                - master
                - develop
                - release
                - /sync\/.*/
                - /feature/sync\/.*/

      - EHRSTATUS-tests:
          context: org-global
          requires:
            - build-and-test-openEHR_SDK
          filters:
            branches:
              ignore:
                - master
                - develop
                - release
                - /sync\/.*/
                - /feature/sync\/.*/

      - KNOWLEDGE-tests:
          context: org-global
          requires:
            - build-and-test-openEHR_SDK
          filters:
            branches:
              ignore:
                - master
                - develop
                - release
                - /sync\/.*/
                - /feature/sync\/.*/

      - QUERYSERVICE-tests-1:
          context: org-global
          requires:
            - build-and-test-openEHR_SDK
          filters:
            branches:
              ignore:
                - master
                - develop
                - release
                - /sync\/.*/
                - /feature/sync\/.*/

      - QUERYSERVICE-tests-2:
          context: org-global
          requires:
            - build-and-test-openEHR_SDK
          filters:
            branches:
              ignore:
                - master
                - develop
                - release
                - /sync\/.*/
                - /feature/sync\/.*/

      - ROBOT-TEST-REPORT:
          context: org-global
          requires:
            - COMPOSITION-tests-1
            - COMPOSITION-tests-2
            - COMPOSITION-tests-3
            - COMPOSITION-tests-4
            - COMPOSITION-tests-5
            - CONTRIBUTION-tests
            - DIRECTORY-tests
            - EHRSERVICE-tests
            - EHRSTATUS-tests
            - KNOWLEDGE-tests
            - QUERYSERVICE-tests-1
            - QUERYSERVICE-tests-2
          filters:
            branches:
              ignore:
                - master
                - develop
                - release
                - /sync\/.*/
                - /feature/sync\/.*/



  # WORKFLOW 2/6) Publish Git tags for SNAPSHOT releases
#  deploy-snapshot-release:
#    when:
#      and:
#        - equal: [ develop, << pipeline.git.branch >> ]
#        # - equal: [ SNAPSHOT, << pipeline.git.tag >> ]
#    jobs:
#      - publish-snapshot:
#          filters:
#            tags:
#              ignore:
#                # - /^v.*/
#                - /SNAPSHOT.*/



  # WORKFLOW 3/6) Publish Git tag for (stable) releases
#  deploy-stable-release:
#    when:
#      and:
#        - equal: [ release, << pipeline.git.branch >> ]
#    jobs:
#      - publish-release



  # # WORKFLOW 4/5) Update SDK version in EHRbase's POM /w lastest stable release
  # update-ehrbase-sdk-dependency:
  #   when:
  #     and:
  #       - equal: [ master, << pipeline.git.branch >> ]
  #   jobs:
  #     - approve-sdk-version-update:
  #         type: approval
  #     - update-ehrbase-sdk-dependency:
  #         requires:
  #           - approve-sdk-version-update



  # WORKFLOW 5/6) Code analysis w/ SonarCloud.io
  QUALITY-GATE-II:
    jobs:
      - build-test-and-analyse-openEHR_SDK:
          context: org-global
          filters:
            branches:
              ignore:
                - master
                # - develop
                - release
                - /sync\/.*/
                - /feature/sync\/.*/


  # WORKFLOW 6/6)
  synced-feature-check:
    description: |
      WHAT THIS WORKFLOW DOES
      =======================

      Build and run all openEHR_SDK Java tests (unit and integration tests)
      with EHRbase being checked out from a branch named sync/* or sync/feature/*

      Consider the following scenarios
      --------------------------------

      code change in repo |
      EHRBASE	    SDK     |   BRANCH          |   CI ACTION       |   COMMENT
      --------------------|-------------------|-------------------|---------------------------------------------------------------------

      YES	        NO	        feature/*           default build	      ehrbase uses SDK referenced in it's parent pom.xml	(commit hash)
      NO	        YES	        feature/*	          default build	      sdk uses EHRBASE (built) from develop branch

      YES	        YES	        feature/*	          SHOULD FAIL		      default builds triggered on both CIs do not take into account
                                                                      respective changes in the featue branch of the other repository
                                                                      NOTE: if the build does NOT fail on ehrbase's and/or sdk's CI
                                                                            then proper Java unit/integration tests are missing!

      YES	        NO	        sync/feature/*	    SHOULD FAIL	        ehrbase's CI fails to checkout sync/feature/* branch from sdk repo
      NO 	        YES	        sync/feature/*	    SHOULD FAIL	        sdk's CI fails to checkout sync/feature/* branch from ehrbase repo

      YES	        YES	        sync/feature/*	    synced build	      - ehrbase's CI uses SDK from sync/feature/* branch
                                                                      - sdk's CI uses EHRBASE from sync/feature/* branch

      explanations        
      --------------------	
      default build (ehrbase)		EHRbase is build using SDK version given in it's parent pom.xml
      default build (sdk)		    SDK is build and tested using EHRbase build from develop branch

      synced build                both CIs take into account respective changes in sync/feature/*
                                  branch of each repository

      Find detailed steps description for this workflow in
      "build-and-test-synced-branches-of-EHRbase-and-openEHR_SDK" job.


      HOW TO USE THIS WORKFLOW?
      =========================

      1. create TWO branches "sync/[issue-id]_name branches" respectively in

        - ehrbase repo       --> i.e.    sync/123_example-issue
        - openehr_sdk repo   --> i.e.    sync/123_example-issue

      2. apply and commit your code changes (!!! in both repositories)
      3. push to openehr_sdk repo (CI will trigger this workflow)
      4. push to ehrbase repo (ehrbase's CI will trigger a similar workflow)

       NOTE: at this point 'synced build' will be trigger on both CIs

      5. create TWO PRs (one in ehrbase, one in openehr_sdk)
      6. merge bot PRs (WARNING):

      ///////////////////////////////////////////////////////////////////////
      ///                                                                 ///
      ///  - make sure that both PRs are reviewed and ready to be merged  ///
      ///    at the same time!                                            ///
      ///  - make sure to sync both PRs w/ develop before merging!        ///
      ///  - open each PR in it's own browser window                      ///
      ///  - MERGE BOTH PRs AT THE SAME TIME!                             ///
      ///                                                                 ///
      //////////////////////////////////////////////////////////////////////

    jobs:
      - check-codestyle:
          filters:
            branches:
              only:
                - /^sync\/.*/
                - /^feature\/sync\/.*/
      - build-and-test-synced-branches-of-EHRbase-and-openEHR_SDK:
          context: org-global
          filters:
            branches:
              only:
                - /^sync\/.*/
                - /^feature\/sync\/.*/
      - COMPOSITION-tests-1:
          context: org-global
          requires:
            - build-and-test-synced-branches-of-EHRbase-and-openEHR_SDK
      - COMPOSITION-tests-2:
          context: org-global
          requires:
            - build-and-test-synced-branches-of-EHRbase-and-openEHR_SDK
      - COMPOSITION-tests-3:
          context: org-global
          requires:
            - build-and-test-synced-branches-of-EHRbase-and-openEHR_SDK
      - COMPOSITION-tests-4:
          context: org-global
          requires:
            - build-and-test-synced-branches-of-EHRbase-and-openEHR_SDK
      - COMPOSITION-tests-5:
          context: org-global
          requires:
            - build-and-test-synced-branches-of-EHRbase-and-openEHR_SDK
      - CONTRIBUTION-tests:
          context: org-global
          requires:
            - build-and-test-synced-branches-of-EHRbase-and-openEHR_SDK
      - DIRECTORY-tests:
          context: org-global
          requires:
            - build-and-test-synced-branches-of-EHRbase-and-openEHR_SDK
      - EHRSERVICE-tests:
          context: org-global
          requires:
            - build-and-test-synced-branches-of-EHRbase-and-openEHR_SDK
      - EHRSTATUS-tests:
          context: org-global
          requires:
            - build-and-test-synced-branches-of-EHRbase-and-openEHR_SDK
      - KNOWLEDGE-tests:
          context: org-global
          requires:
            - build-and-test-synced-branches-of-EHRbase-and-openEHR_SDK
      - QUERYSERVICE-tests-1:
          context: org-global
          requires:
            - build-and-test-synced-branches-of-EHRbase-and-openEHR_SDK
      - QUERYSERVICE-tests-2:
          context: org-global
          requires:
            - build-and-test-synced-branches-of-EHRbase-and-openEHR_SDK
      # - SECURITY-test:
      #     context: org-global
      #     requires:
      #       - build-and-test-synced-branches-of-EHRbase-and-openEHR_SDK
      # - ADMIN-test:
      #     context: org-global
      #     requires:
      #       - build-and-test-synced-branches-of-EHRbase-and-openEHR_SDK
      - ROBOT-TEST-REPORT:
          context: org-global
          requires:
            - COMPOSITION-tests-1
            - COMPOSITION-tests-2
            - COMPOSITION-tests-3
            - COMPOSITION-tests-4
            - COMPOSITION-tests-5
            - CONTRIBUTION-tests
            - DIRECTORY-tests
            - EHRSERVICE-tests
            - EHRSTATUS-tests
            - KNOWLEDGE-tests
            - QUERYSERVICE-tests-1
            - QUERYSERVICE-tests-2
            # - SECURITY-test
            # - ADMIN-test





jobs:
  #           88    ,ad8888ba,    88888888ba    ad88888ba
  #           88   d8"'    `"8b   88      "8b  d8"     "8b
  #           88  d8'        `8b  88      ,8P  Y8,
  #           88  88          88  88aaaaaa8P'  `Y8aaaaa,
  #           88  88          88  88""""""8b,    `"""""8b,
  #           88  Y8,        ,8P  88      `8b          `8b
  #   88,   ,d88   Y8a.    .a8P   88      a8P  Y8a     a8P
  #    "Y8888P"     `"Y8888Y"'    88888888P"    "Y88888P"


  check-codestyle:
    executor: docker-python3
    steps:
      - checkout
      - install-java-maven
      - maven-check-codestyle


  build-and-test-openEHR_SDK:
    description: Build and run all openEHR_SDK Java tests (unit and integration tests w/ EHRbase + DB running).
    executor: docker-py3-postgres
    steps:
      - checkout
      - cache-out-sdk-m2-dependencies
      - build-sdk
      - git-clone-ehrbase-repo
      - git-clone-robot-integration-tests-repo
      - cache-out-ehrbase-m2-dependencies
      - force-ehrbase-build-to-use-local-sdk-version
      - build-and-run-ehrbase-then-run-all-sdk-java-tests
      - cache-in-ehrbase-m2-dependencies
      - cache-in-sdk-m2-dependencies
      - collect-sdk-unittest-results
      - collect-sdk-integrationtest-results
      - save-skd-test-results
      - save-sdk-workspace


  build-and-test-synced-branches-of-EHRbase-and-openEHR_SDK:
    description: |
      Build and run all openEHR_SDK Java tests (unit and integration tests)
      w/ EHRbase being checked out from a sync/*-branch or feature/sync/*-branch
    executor: docker-py3-postgres
    steps:
      - checkout
      - cache-out-sdk-m2-dependencies
      - build-sdk
      - git-clone-ehrbase-repo:
          branch: ${CIRCLE_BRANCH}
      - git-clone-robot-integration-tests-repo
      - cache-out-ehrbase-m2-dependencies
      - force-ehrbase-build-to-use-local-sdk-version
      - build-and-run-ehrbase-then-run-all-sdk-java-tests
      - cache-in-ehrbase-m2-dependencies
      - cache-in-sdk-m2-dependencies
      - collect-sdk-unittest-results
      - collect-sdk-integrationtest-results
      - save-skd-test-results
      - save-sdk-workspace


  COMPOSITION-tests-1:
    executor: docker-py3-postgres
    # executor: machine-ubuntu-2004                          # (use for pipeline debugging only)
    steps:
      #-----------------------------------#---------------(use for pipeline debugging only)
      # - run: echo MOCKED JOB            #
      # - cache-out-ehrbase-workspace     #
      #-----------------------------------#
      - restore-ehrbase-workspace
      # - start-ehrbase-server
      - run-robot-tests:
          include-tags: "compositionANDcomposition_create"
          test-suite-path: "COMPOSITION_TESTS"
          test-suite-name: "COMPOSITION_1"

  COMPOSITION-tests-2:
    executor: docker-py3-postgres
    # executor: machine-ubuntu-2004                          # (use for pipeline debugging only)
    steps:
      #-----------------------------------#---------------(use for pipeline debugging only)
      # - run: echo MOCKED JOB            #
      # - cache-out-ehrbase-workspace     #
      #-----------------------------------#
      - restore-ehrbase-workspace
      - run-robot-tests:
          include-tags: "compositionANDcomposition_get"
          test-suite-path: "COMPOSITION_TESTS"
          test-suite-name: "COMPOSITION_2"

  COMPOSITION-tests-3:
    executor: docker-py3-postgres
    # executor: machine-ubuntu-2004                          # (use for pipeline debugging only)
    steps:
      #-----------------------------------#---------------(use for pipeline debugging only)
      # - run: echo MOCKED JOB            #
      # - cache-out-ehrbase-workspace     #
      #-----------------------------------#
      - restore-ehrbase-workspace
      - run-robot-tests:
          include-tags: "compositionANDcomposition_get_versioned"
          test-suite-path: "COMPOSITION_TESTS"
          test-suite-name: "COMPOSITION_3"

  COMPOSITION-tests-4:
    executor: docker-py3-postgres
    # executor: machine-ubuntu-2004                          # (use for pipeline debugging only)
    steps:
      #-----------------------------------#---------------(use for pipeline debugging only)
      # - run: echo MOCKED JOB            #
      # - cache-out-ehrbase-workspace     #
      #-----------------------------------#
      - restore-ehrbase-workspace
      - run-robot-tests:
          include-tags: "compositionANDcomposition_update"
          test-suite-path: "COMPOSITION_TESTS"
          test-suite-name: "COMPOSITION_4"

  COMPOSITION-tests-5:
    executor: docker-py3-postgres
    # executor: machine-ubuntu-2004                          # (use for pipeline debugging only)
    steps:
      #-----------------------------------#---------------(use for pipeline debugging only)
      # - run: echo MOCKED JOB            #
      # - cache-out-ehrbase-workspace     #
      #-----------------------------------#
      - restore-ehrbase-workspace
      - run-robot-tests:
          include-tags: "compositionANDcomposition_delete"
          test-suite-path: "COMPOSITION_TESTS"
          test-suite-name: "COMPOSITION_5"

  CONTRIBUTION-tests:
    executor: docker-py3-postgres
    # executor: machine-ubuntu-2004                          # (use for pipeline debugging only)
    steps:
      #-----------------------------------#---------------(use for pipeline debugging only)
      # - run: echo MOCKED JOB            #
      # - cache-out-ehrbase-workspace     #
      #-----------------------------------#
      - restore-ehrbase-workspace
      - run-robot-tests:
          include-tags: "CONTRIBUTION"
          test-suite-path: "CONTRIBUTION_TESTS"
          test-suite-name: "CONTRIBUTION"

  DIRECTORY-tests:
    executor: docker-py3-postgres
    # executor: machine-ubuntu-2004                          # (use for pipeline debugging only)
    steps:
      #-----------------------------------#---------------(use for pipeline debugging only)
      # - run: echo MOCKED JOB            #
      # - cache-out-ehrbase-workspace     #
      #-----------------------------------#
      - restore-ehrbase-workspace
      - run-robot-tests:
          include-tags: "directory"
          test-suite-path: "DIRECTORY_TESTS"
          test-suite-name: "DIRECTORY"

  EHRSERVICE-tests:
    executor: docker-py3-postgres
    # executor: machine-ubuntu-2004                          # (use for pipeline debugging only)
    steps:
      #-----------------------------------#---------------(use for pipeline debugging only)
      # - run: echo MOCKED JOB            #
      # - cache-out-ehrbase-workspace     #
      #-----------------------------------#
      - restore-ehrbase-workspace
      - run-robot-tests:
          include-tags: "EHR_SERVICE"
          test-suite-path: "EHR_SERVICE_TESTS"
          test-suite-name: "EHR_SERVICE"

  EHRSTATUS-tests:
    executor: docker-py3-postgres
    # executor: machine-ubuntu-2004                          # (use for pipeline debugging only)
    steps:
      #-----------------------------------#---------------(use for pipeline debugging only)
      # - run: echo MOCKED JOB            #
      # - cache-out-ehrbase-workspace     #
      #-----------------------------------#
      - restore-ehrbase-workspace
      - run-robot-tests:
          include-tags: "EHR_STATUS"
          test-suite-path: "EHR_STATUS_TESTS"
          test-suite-name: "EHR_STATUS"

  KNOWLEDGE-tests:
    executor: docker-py3-postgres
    # executor: machine-ubuntu-2004                          # (use for pipeline debugging only)
    steps:
      #-----------------------------------#---------------(use for pipeline debugging only)
      # - run: echo MOCKED JOB            #
      # - cache-out-ehrbase-workspace     #
      #-----------------------------------#
      - restore-ehrbase-workspace
      - run-robot-tests:
          include-tags: "OPT"
          test-suite-path: "KNOWLEDGE_TESTS"
          test-suite-name: "KNOWLEDGE"
          allow-template-overwrite: false
          cache-enabled: false

  QUERYSERVICE-tests-1:
    executor: docker-py3-postgres
    # executor: machine-ubuntu-2004                          # (use for pipeline debugging only)
    steps:
      #-----------------------------------#---------------(use for pipeline debugging only)
      # - run: echo MOCKED JOB            #
      # - cache-out-ehrbase-workspace     #
      #-----------------------------------#
      - restore-ehrbase-workspace
      - run-robot-tests:
          include-tags: "aql_adhoc-queryANDaql_empty_db"
          test-suite-path: "QUERY_SERVICE_TESTS"
          test-suite-name: "ADHOC-QUERY-1"

  QUERYSERVICE-tests-2:
    executor: machine-ubuntu-2004
    environment:
      SUT: TEST
    steps:
      - restore-ehrbase-workspace
      - restore_cache:
          keys:
            - expected-results-loaded-db-v8
      - run:
          name: list files after restore of cache
          command: |
            cd ehrbase
            ls -la tests/robot/_resources/test_data_sets/query/aql_queries_valid/A/
            ls -la tests/robot/_resources/test_data_sets/query/aql_queries_valid/B/
            ls -la tests/robot/_resources/test_data_sets/query/aql_queries_valid/C/
            ls -la tests/robot/_resources/test_data_sets/query/aql_queries_valid/D/
      - restore_cache:
          keys:
            - ehrbasedb-dump-v8
      # COMMENT: USE THE NEXT LINE ONLY TO FORCE TEST-DATA REGENERATION! Otherwise comment it out!
      - run: echo "FORCE GENERATION OF TEST-DATA AND EXPECTED RESULTS!" > /tmp/DATA_CHANGED_NOTICE
      - run:
          name: CHECK IF EXPECTED-RESULT TEMPLATES HAVE CHANGED AND REGENERATE TEST-DATA IF NEEDED
          command: |
            cd ehrbase
            FILE=/tmp/DATA_CHANGED_NOTICE
            if [ -f "$FILE" ]; then
                echo "REGENERATION OF TEST-DATA AND EXPECTED RESULT SETS IS EITHER REQUIRED OR WAS FORCED."
            else 
                find tests/robot/_resources/test_data_sets/query/expected_results/loaded_db/ -type f ! -name *.tmp.json | sort | xargs cat > /tmp/expected-results-loaded_db-seed
                sha256sum /tmp/expected-results-loaded_db-seed
                ACTUAL_HASH="$(sha256sum /tmp/expected-results-loaded_db-seed | cat)"
                EXPECTED_HASH="f5ee5a9a55c50687dafc3c3acff66089759f1577d7a5dd71aff6e60793ce91c2  /tmp/expected-results-loaded_db-seed"
                [ "$ACTUAL_HASH" = "$EXPECTED_HASH" ] && echo "Expected results unchanged!  Don't regenerate test-data!" || echo "Expected result data-sets changed. Regenerate!" > /tmp/DATA_CHANGED_NOTICE
            fi
      - run-robot-tests:
          sut: "TEST"
          include-tags: "aql_adhoc-queryANDaql_loaded_db"
          test-suite-path: "QUERY_SERVICE_TESTS"
          test-suite-name: "ADHOC-QUERY-2"
      - save_cache:
          key: expected-results-loaded-db-v8-{{ checksum "/tmp/expected-results-loaded_db-seed" }}
          paths:
            - ehrbase/tests/robot/_resources/test_data_sets/query/expected_results/loaded_db/
            - ehrbase/tests/robot/_resources/test_data_sets/query/aql_queries_valid/
      - run:
          name: list files after save of cache
          command: |
            cd ehrbase
            ls -la tests/robot/_resources/test_data_sets/query/aql_queries_valid/A/
            ls -la tests/robot/_resources/test_data_sets/query/aql_queries_valid/B/
            ls -la tests/robot/_resources/test_data_sets/query/aql_queries_valid/C/
            ls -la tests/robot/_resources/test_data_sets/query/aql_queries_valid/D/
      - save_cache:
          key: ehrbasedb-dump-v8-{{ checksum "/tmp/ehrbasedb_dump.sql" }}
          paths:
            - /tmp/ehrbasedb_dump.sql



  ROBOT-TEST-REPORT:
    executor: docker-py3-postgres
    # executor: machine-ubuntu-2004                          # (use for pipeline debugging only)
    steps:
      #-----------------------------------#---------------(use for pipeline debugging only)
      # - run: echo MOCKED JOB            #
      # - cache-out-ehrbase-workspace     #
      #-----------------------------------#
      # - cache-out-python-requirements                 # TODO: @wlad find a solution: python cache not working yet
      - restore-test-results-folder
      - merge-robot-outputs


  publish-snapshot:
    executor: docker-python3
    # executor: machine-ubuntu-2004                          # (use for pipeline debugging only!)
    description: |
      Publishes a SNAPSHOT release version via jitpack.io
      whenever one of these keywords: [major], [minor] or [patch]
      is used in a PR's merge commit title when merging a feature branch into develop.
    steps:
      - checkout
      - configure-git-for-ci-bot
      - cache-out-versionupdater-dependencies
      - update-and-publish-snapshot-release-version
      - cache-in-versionupdater-dependencies


  publish-release:
    executor: docker-python3
    # executor: machine-ubuntu-2004                          # (use for pipeline debugging only!)
    description: |
      Publishes a (stable) release version via jitpack.io
      whenever a 'release' branch is pushed to remote.
    steps:
      - checkout
      - configure-git-for-ci-bot
      - cache-out-versionupdater-dependencies
      - publish-release-version


  update-ehrbase-sdk-dependency:
    executor: docker-python3
    # executor: machine-ubuntu-2004                          # (use for pipeline debugging only!)
    steps:
      #-----------------------------------#---------------(use for pipeline debugging only)
      - run: echo MOCKED JOB            #
      # - cache-out-ehrbase-workspace     #
      #-----------------------------------#
      # - checkout
      # - configure-git-for-ci-bot
      # - cache-out-versionupdater-dependencies


  build-test-and-analyse-openEHR_SDK:
    description: |
      Runs code analysis w/ SonarCloud via CircleCI Orb provided by sonarsource team.
      Orb documentation: https://circleci.com/orbs/registry/orb/sonarsource/sonarcloud
      Scanner configuration happens in file sonar-project.properties in project's root folder.
    executor: docker-py3-postgres
    steps:
      - checkout
      - cache-out-sdk-m2-dependencies
      - build-sdk
      - git-clone-ehrbase-repo
      - cache-out-ehrbase-m2-dependencies
      - force-ehrbase-build-to-use-local-sdk-version
      - build-and-run-ehrbase-then-run-all-sdk-java-tests:
          skip-jacoco: false
          skip-tests: false
          skip-javadoc: false
      - cache-in-ehrbase-m2-dependencies
      - cache-in-sdk-m2-dependencies
      - collect-sdk-unittest-results
      - collect-sdk-integrationtest-results
      - save-skd-test-results
      - save-jacoco-coverage-report
      - sonarcloud/scan:
          cache_version: 1       # NOTE: increment this value to force cache rebuild







commands:
  #     ,ad8888ba,    ,ad8888ba,    88b           d88  88b           d88         db         888b      88  88888888ba,     ad88888ba
  #    d8"'    `"8b  d8"'    `"8b   888b         d888  888b         d888        d88b        8888b     88  88      `"8b   d8"     "8b
  #   d8'           d8'        `8b  88`8b       d8'88  88`8b       d8'88       d8'`8b       88 `8b    88  88        `8b  Y8,
  #   88            88          88  88 `8b     d8' 88  88 `8b     d8' 88      d8'  `8b      88  `8b   88  88         88  `Y8aaaaa,
  #   88            88          88  88  `8b   d8'  88  88  `8b   d8'  88     d8YaaaaY8b     88   `8b  88  88         88    `"""""8b,
  #   Y8,           Y8,        ,8P  88   `8b d8'   88  88   `8b d8'   88    d8""""""""8b    88    `8b 88  88         8P          `8b
  #    Y8a.    .a8P  Y8a.    .a8P   88    `888'    88  88    `888'    88   d8'        `8b   88     `8888  88      .a8P   Y8a     a8P
  #     `"Y8888Y"'    `"Y8888Y"'    88     `8'     88  88     `8'     88  d8'          `8b  88      `888  88888888Y"'     "Y88888P"


  update-and-publish-snapshot-release-version:
    steps:
      - install-java-maven
      - install-xml-cli-tool
      - run:
          name: Update Snapshot Release Version
          command: |
            echo test
            last_commit="$(git log -1 --pretty=%B | cat)"
            echo $last_commit
            case $last_commit in
                *"[major]"*)
                
                    echo "bump major release version"
                    mvn11 build-helper:parse-version versions:set -DnewVersion=\${parsedVersion.nextMajorVersion}.0.0 versions:commit
                    SDK_VERSION=$(xmlstarlet sel -t -m "/_:project/_:version" -v .   pom.xml )
                    
                    git commit -am "updated major version to v${SDK_VERSION}-SNAPSHOT [skip ci]"
                    git checkout -b major-snapshot-update
                    git merge --strategy=ours develop
                    git checkout develop
                    git merge major-snapshot-update
                    git tag -a v${SDK_VERSION}-SNAPSHOT -m "v${SDK_VERSION}-SNAPSHOT release"
                    git push --set-upstream origin develop v${SDK_VERSION}-SNAPSHOT

                    exit 0
                    ;;
                *"[minor]"*)

                    echo "bump minor release version"
                    mvn11 build-helper:parse-version versions:set -DnewVersion=\${parsedVersion.majorVersion}.\${parsedVersion.nextMinorVersion}.0 versions:commit
                    SDK_VERSION=$(xmlstarlet sel -t -m "/_:project/_:version" -v .   pom.xml )
                    
                    git commit -am "updated minor version to v${SDK_VERSION}-SNAPSHOT [skip ci]"
                    git checkout -b minor-snapshot-update
                    git merge --strategy=ours develop
                    git checkout develop
                    git merge minor-snapshot-update
                    git tag -a v${SDK_VERSION}-SNAPSHOT -m "v${SDK_VERSION}-SNAPSHOT release"
                    git push --set-upstream origin develop v${SDK_VERSION}-SNAPSHOT

                    exit 0
                    ;;
                *"[patch]"*)

                    echo "bump patch release version"
                    mvn11 build-helper:parse-version versions:set -DnewVersion=\${parsedVersion.majorVersion}.\${parsedVersion.minorVersion}.\${parsedVersion.nextIncrementalVersion} versions:commit
                    SDK_VERSION=$(mvn11 -q -Dexec.executable="echo" -Dexec.args='${project.version}' --non-recursive exec:exec)
                    
                    git commit -am "updated patch version to v${SDK_VERSION}-SNAPSHOT [skip ci]"
                    git checkout -b patch-snapshot-update
                    git merge --strategy=ours develop
                    git checkout develop
                    git merge patch-snapshot-update
                    git tag -a v${SDK_VERSION}-SNAPSHOT -m "v${SDK_VERSION}-SNAPSHOT release"
                    git push --set-upstream origin develop v${SDK_VERSION}-SNAPSHOT

                    exit 0
                    ;;
                *)
                    echo "This was just a simple merge - no versions updated"
                    exit 0
                    ;;
            esac


  publish-release-version:
    steps:
      - install-java-maven
      - install-xml-cli-tool
      - run:
          name: Create and push release version tag
          description: |
            Use this command only in a job that is triggered by push of a 'release' branch to remote.
            Don't do any commits on that 'release' branch. Just push it!
            The CI pipeline will then
            - (--hard) reset 'master' to the state of 'release' branch
            - and delete 'release' branch on remote
            Nothing is ever merged back into develop (BECAUSE THERE IS NO NEED FOR THAT!).
            Everything flows in one direction: from feature to develop from develop to master.
            The idea is to have one main branch (develop) that holds everything, including releases,
            and 'master' branch serves as backup of last (know as working) 'develop' branch.
            Besides serving as a backup 'master' can further be used to trigger other workflows
            i.e. deployments into production.
          command: |
            git branch
            SDK_VERSION=$(xmlstarlet sel -t -m "/_:project/_:version" -v .   pom.xml )
            echo $SDK_VERSION
            git fetch
            git checkout master
            git merge release --no-ff -m "NEW RELEASE VERSION: v${SDK_VERSION} [skip ci]"
            git push origin --delete release    # NOTE: this deletes realse branch on remote
            git tag -a v${SDK_VERSION} -m "v${SDK_VERSION} (stable) release"
            git push --set-upstream origin master v${SDK_VERSION}
            git checkout develop
            git merge master
            git push --set-upstream origin develop v${SDK_VERSION}


  configure-git-for-ci-bot:
    steps:
      - add_ssh_keys:
          fingerprints:
            - 3e:42:46:e1:9e:40:4d:ae:33:ab:db:0a:95:24:d2:99
      - run:
          name: Configure GIT
          command: |
            git config --global user.email "50235421+ehrbase-tech-user@users.noreply.github.com"
            git config --global user.name "ci-bot"
            # git config --global push.followTags true
            git remote -v
  

  install-xml-cli-tool:
    steps:
      - run:
          name: Install xmlstarlet to handle XML file from CLI
          command: |
            sudo killall -9 apt-get || true
            sudo apt -y update && sudo apt -y install xmlstarlet
  

  cache-out-versionupdater-dependencies:
    steps:
      - restore_cache:
          key: maven-dep-v1-

  cache-in-versionupdater-dependencies:
    steps:
      - save_cache:
          key: maven-dep-v1-
          paths:
            - ~/.m2





  # ///////////////////////////////////////////////////////////////////////////
  # /// SDK COMMANDS                                                        ///
  # ///////////////////////////////////////////////////////////////////////////

  maven-check-codestyle:
    description: Run spotless plugin check goal
    steps:
      - run:
          name: Run spotless plugin check goal
          command: |
            mvn11 com.diffplug.spotless:spotless-maven-plugin:check


  build-sdk:
    steps:
      - install-java-maven
      - install-xml-cli-tool
      - run:
          name: Maven build, install openEHR_SDK (skip Tests!)
          command: |
            mvn11 build-helper:parse-version versions:set -DnewVersion=\${project.version}-LOCAL$(cat /proc/sys/kernel/random/uuid)  -DprocessAllModules=true versions:commit
            mvn11 install -Dmaven.javadoc.skip=true -Djacoco.skip=true -Dmaven.test.skip
      - run:
          name: Save the version number of locally installed SDK into a file
          command: |
            SDK_VERSION=$(xmlstarlet sel -t -m "/_:project/_:version" -v .   pom.xml )
            echo $SDK_VERSION > SDK_VERSION
            cat SDK_VERSION


  build-and-test-sdk:
    steps:
      - install-java-maven
      - install-xml-cli-tool
      - run:
          name: Maven build, test (ONLY unit tests), install openEHR_SDK
          command: |
            mvn11 build-helper:parse-version versions:set -DnewVersion=\${project.version}-LOCAL -DprocessAllModules=true versions:commit
            mvn11 install dependency:go-offline -Djacoco.skip=true -Dmaven.javadoc.skip=true
      - run:
          name: Save the version number of locally installed SDK into a file
          command: |
            SDK_VERSION=$(xmlstarlet sel -t -m "/_:project/_:version" -v .   pom.xml )
            echo $SDK_VERSION > SDK_VERSION
            cat SDK_VERSION


  build-and-integration-test-sdk:
    description: |
      WARNING: this command requires EHRbase to be up and running
    steps:
      - install-java-maven
      - run:
          name: Maven run only Java integration tests of openEHR_SDK
          description: |
            Runs maven test phase using 'slow' profile defined in parent pom.xml
            This way only the Java integration tests are executed.
          command: |
            jps
            mvn11 test -Pslow -Dmaven.javadoc.skip=true


  build-and-run-ehrbase-then-run-all-sdk-java-tests:
    description: |
      Executes all SDK java test (unit and integration)
      This requires EHRbase + DB to be running during test execution.
    parameters:
      skip-jacoco:
        description: Skip Jacoco's Code Instrumentation For Coverage Analysis
        type: boolean
        default: true
      skip-tests:
        description: Do Not Compile And Do Not Run Test Code
        type: boolean
        default: true
      skip-javadoc:
        description: Skip Java Docs Generation
        type: boolean
        default: true
    steps:
      - install-java-maven
      - install-xml-cli-tool
      - run:
          name: Maven build EHRbase
          command: |
            cd ~/projects/ehrbase
            mvn17 package -Dmaven.javadoc.skip=<< parameters.skip-javadoc >> \
                        -Djacoco.skip=<< parameters.skip-jacoco >> \
                        -Dmaven.test.skip=<< parameters.skip-tests >>
      - run:
          name: Start EHRbase server and run all test of SDK
          command: |
            ls -la
            cd ~/projects/ehrbase
            EHRbase_VERSION=$(xmlstarlet sel -t -m "/_:project/_:version" -v .   pom.xml )
            echo ${EHRbase_VERSION}
            java17 -jar application/target/application-${EHRbase_VERSION}.jar --cache.enabled=true > log &
            grep -m 1 "Started EhrBase in" <(tail -f log)
            cd ..
            jps
            mvn11 verify -DskipIntegrationTests=false -Dmaven.javadoc.skip=true -Djacoco.skip=<< parameters.skip-jacoco >>


  cache-out-sdk-m2-dependencies:
    steps:
      - run:
          name: Generate Cache Checksum for openEHR_SDK Dependencies
          command: find . -type f -name *.java | sort | xargs cat > /tmp/openEHR_SDK_maven_cache_seed
      - restore_cache:
          key: openEHR_SDK-v1


  cache-in-sdk-m2-dependencies:
    steps:
      - save_cache:
          key: openEHR_SDK-v1-{{ checksum "/tmp/openEHR_SDK_maven_cache_seed" }}
          paths:
          - ~/.m2


  collect-sdk-unittest-results:
    steps:
      - run:
          name: Save unit test results
          command: |
            mkdir -p ~/test-results/unit-tests/
            find . -type f -regex ".*/target/surefire-reports/.*xml" -exec cp {} ~/test-results/unit-tests/ \;
            find . -type f -regex ".*/target/surefire-reports/.*txt" -exec cp {} ~/test-results/unit-tests/ \;
          when: always


  collect-sdk-integrationtest-results:
    steps:
      - run:
          name: Save integration test results
          command: |
            mkdir -p ~/test-results/integration-tests/
            find . -type f -regex ".*/target/failsafe-reports/.*xml" -exec cp {} ~/test-results/integration-tests/ \;
            find . -type f -regex ".*/target/failsafe-reports/.*txt" -exec cp {} ~/test-results/integration-tests/ \;
          when: always


  save-skd-test-results:
    steps:
      - store_test_results:
          path: ~/test-results
      - store_artifacts:
          path: ~/test-results


  save-jacoco-coverage-report:
    description: |
      Uploads the overall coverage report as circleci artifact
      The separate reports for unit and integration coverage are not required.
    steps:
      # - store_artifacts:
      #     path: test-coverage/target/site/jacoco-ut-coverage
      # - store_artifacts:
      #     path: test-coverage/target/site/jacoco-it-coverage
      - store_artifacts:
          path: test-coverage/target/site/jacoco-overall-coverage


  save-sdk-workspace:
    steps:
      - persist_to_workspace:
          root: /home/circleci
          paths:
            - .m2
            - projects


  restore-sdk-workspace:
    description: |
      Restores any file / folder that was previously persisted w/ 'persist_to_workspace'.
      NOTE: best practise is to persist files or folders very selectively.
            Do not persist root or the whole workspace at one, otherwise concurrent jobs
            may fail to restore that stuff.
    steps:
      - attach_workspace:
          at: /home/circleci/



  # WARNING: don't use these two steps in production
  #          use them for pipeline debugging only!
  cache-in-sdk-workspace:
    steps:
      - save_cache:
          key: sdk-workspace-cache
          paths:
            - .
  cache-out-sdk-workspace:
    steps:
      - restore_cache:
          key: sdk-workspace-cache





  # ///////////////////////////////////////////////////////////////////////////
  # /// EHRBASE COMMANDS                                                    ///
  # ///////////////////////////////////////////////////////////////////////////

  git-clone-ehrbase-repo:
    parameters:
      branch:
        description: Git branch to checkout
        type: string
        default: develop
    steps:
      - run:
          name: Git clone EHRbase repo
          command: |
            git clone git@github.com:ehrbase/ehrbase.git
            ls -la
            cd ehrbase
            git checkout << parameters.branch >>

  git-clone-robot-integration-tests-repo:
    steps:
      - run:
          name: Git clone Robot integration-tests repository
          command: |
            git clone git@github.com:ehrbase/integration-tests.git
            ls -la
            cd integration-tests
            mv tests/* ../ehrbase/tests/
            cd ..

  build-and-test-ehrbase:
    steps:
      - install-java-maven
      - run:
          name: Maven build EHRbase
          command: |
            cd ~/projects/ehrbase
            mvn17 package dependency:go-offline -Dmaven.javadoc.skip=true


  cache-in-ehrbase-m2-dependencies:
    steps:
      - save_cache:
          key: EHRbase-v1-{{ checksum "/tmp/EHRbase_maven_cache_seed" }}
          paths:
            - ~/.m2/repository/org/ehrbase/openehr/


  cache-out-ehrbase-m2-dependencies:
    steps:
      - run:
          name: Generate Cache Checksum for EHRbase Dependencies
          command: find ~/projects/ehrbase -name 'pom.xml' | sort | xargs cat > /tmp/EHRbase_maven_cache_seed
      - restore_cache:
          key: EHRbase-v1


  save-ehrbase-workspace:
    steps:
    - persist_to_workspace:
        root: /home/circleci
        paths:
          - projects/ehrbase


  restore-ehrbase-workspace:
    description: Attach EHRbase repo containing target folder and tests back to workspace
    steps:
      - run: ls -la
      - attach_workspace:
          at: /home/circleci/
      - run: ls -la ehrbase


  force-ehrbase-build-to-use-local-sdk-version:
    steps:
      - install-xml-cli-tool
      - run:
          name: Adjust SDK version number in EHRbase's pom
          command: |
            SDK_VERSION=$(cat ~/projects/SDK_VERSION)
            echo $SDK_VERSION
            cd ~/projects/ehrbase
            xmlstarlet edit --inplace --update /_:project/_:properties/_:ehrbase.sdk.version --value $SDK_VERSION bom/pom.xml
            cat bom/pom.xml
  


  # WARNING: don't use these two steps in production
  #          use them for pipeline debugging only!
  cache-in-ehrbase-workspace:
    steps:
      - save_cache:
          key: ehrbase-workspace-cache-v3
          paths:
            - ehrbase
  cache-out-ehrbase-workspace:
    steps:
      - restore_cache:
          key: ehrbase-workspace-cache-v3





# ///////////////////////////////////////////////////////////////////////////
# /// HELPER COMMANDS                                                    ///
# ///////////////////////////////////////////////////////////////////////////

  install-java-maven:
    description: Install Java 11, 17 and maven (if not already installed)
    steps:
      - run:
          name: Install Java 11
          command: |
            if [ ! -d "/usr/lib/jvm/jdk-11.0.17+8" ]; then
              wget https://github.com/adoptium/temurin11-binaries/releases/download/jdk-11.0.17%2B8/OpenJDK11U-jdk_x64_linux_hotspot_11.0.17_8.tar.gz -O /tmp/openjdk-11.tar.gz
              sudo mkdir -p /usr/lib/jvm
              sudo tar xfvz /tmp/openjdk-11.tar.gz --directory /usr/lib/jvm
              rm -f /tmp/openjdk-11.tar.gz
              sudo ln -s /usr/lib/jvm/jdk-11.0.17+8 /opt/jdk11
            fi
      - run:
          name: Install Java 17
          command: |
            if [ ! -d "/usr/lib/jvm/jdk-17.0.5+8" ]; then
              wget https://github.com/adoptium/temurin17-binaries/releases/download/jdk-17.0.5%2B8/OpenJDK17U-jdk_x64_linux_hotspot_17.0.5_8.tar.gz -O /tmp/openjdk-17.tar.gz
              sudo mkdir -p /usr/lib/jvm
              sudo tar xfvz /tmp/openjdk-17.tar.gz --directory /usr/lib/jvm
              rm -f /tmp/openjdk-17.tar.gz
              sudo ln -s /usr/lib/jvm/jdk-17.0.5+8 /opt/jdk17
              sudo sh -c 'for bin in /usr/lib/jvm/jdk-17.0.5+8/bin/*; do update-alternatives --install /usr/bin/$(basename $bin) $(basename $bin) $bin 100; done'
              sudo sh -c 'for bin in /usr/lib/jvm/jdk-17.0.5+8/bin/*; do update-alternatives --set $(basename $bin) $bin; done'
            fi
      - run:
          name: Install Maven tool
          command: |
            sudo killall -9 apt-get || true
            if [ ! -d "/usr/lib/maven/apache-maven-3.8.7" ]; then
              wget https://archive.apache.org/dist/maven/maven-3/3.8.7/binaries/apache-maven-3.8.7-bin.tar.gz -O /tmp/maven.tar.gz
              sudo mkdir -p /usr/lib/maven
              sudo tar xfvz /tmp/maven.tar.gz --directory /usr/lib/maven
              rm -f /tmp/maven.tar.gz
              sudo ln -s /usr/lib/maven/apache-maven-3.8.7 /opt/maven
              sudo update-alternatives --install /usr/bin/mvn mvn /usr/lib/maven/apache-maven-3.8.7/bin/mvn 100
              sudo update-alternatives --set mvn /usr/lib/maven/apache-maven-3.8.7/bin/mvn
            fi
      - run:
          name: Setup aliases and variables
          command: |
            #We default to JDK17 so we do not run into problems with running ehrbase through mvn
            #To make sure Byte code and jvm libs of SDK are compatible with JRE11 maven.compiler.release property is used in SDK main pom.xml
            sudo sh -c "echo 'export JAVA_HOME=/opt/jdk17' >> /etc/bash.bashrc"
            sudo sh -c "echo 'export MAVEN_HOME=/opt/maven' >> /etc/bash.bashrc"
            sudo sh -c "echo 'export M2_HOME=\$MAVEN_HOME' >> /etc/bash.bashrc"
            sudo sh -c "echo 'alias java11=\"/opt/jdk11/bin/java\"' >> /etc/bash.bashrc"
            sudo sh -c "echo 'alias java17=\"/opt/jdk17/bin/java\"' >> /etc/bash.bashrc"
            sudo sh -c "echo 'alias mvn11=\"JAVA_HOME=/opt/jdk11 /opt/maven/bin/mvn\"' >> /etc/bash.bashrc"
            sudo sh -c "echo 'alias mvn17=\"JAVA_HOME=/opt/jdk17 /opt/maven/bin/mvn\"' >> /etc/bash.bashrc"
            sudo chmod +x /etc/bash.bashrc
            sudo chmod +x /etc/profile
            source /etc/bash.bashrc
            cat /etc/bash.bashrc
            ls -lah /etc
      - verify-java-maven-install

  verify-java-maven-install:
    description: Install Java 11, 17 and maven (if not already installed)
    steps:
      - run:
          name: Show active and installed JDK/Maven versions
          command: |
            echo "PATH: $PATH"
            echo "JAVA_HOME: $JAVA_HOME"
            echo "MAVEN_HOME: $MAVEN_HOME"
            echo "M2_HOME: $M2_HOME"
            echo 'JDK 17 (java17):'
            java17 --version
            echo 'JDK 11 (java11):'
            java11 --version
            echo 'JDK default (java):'
            java --version
            echo 'Maven with JDK 17 (mvn17):'
            mvn17 --version
            echo 'Maven with JDK 11 (mvn11):'
            mvn11 --version
            echo 'Maven default (mvn):'
            mvn --version
            


  install-python3-requirements:
    description: Install Python requirements
    steps:
      - run:
          name: Install Python requirements
          command: |
            python3 -c "import site; print(site.getsitepackages())"
            pip3 install -r ~/projects/ehrbase/tests/requirements.txt



  #                            88
  #                            88                         ,d             ,d                             ,d
  #                            88                         88             88                             88
  #   8b,dPPYba,   ,adPPYba,   88,dPPYba,    ,adPPYba,  MM88MMM        MM88MMM  ,adPPYba,  ,adPPYba,  MM88MMM  ,adPPYba,
  #   88P'   "Y8  a8"     "8a  88P'    "8a  a8"     "8a   88             88    a8P_____88  I8[    ""    88     I8[    ""
  #   88          8b       d8  88       d8  8b       d8   88             88    8PP"""""""   `"Y8ba,     88      `"Y8ba,
  #   88          "8a,   ,a8"  88b,   ,a8"  "8a,   ,a8"   88,            88,   "8b,   ,aa  aa    ]8I    88,    aa    ]8I
  #   88           `"YbbdP"'   8Y"Ybbd8"'    `"YbbdP"'    "Y888          "Y888  `"Ybbd8"'  `"YbbdP"'    "Y888  `"YbbdP"'
  #
  # ///////////////////////////////////////////////////////////////////////////
  # /// ROBOT INTEGRATION TESTS COMMANDS                                    ///
  # ///////////////////////////////////////////////////////////////////////////

  start-ehrbase-server:
    steps:
      # - openjdk-install/openjdk:    # (use w/ machine executor only)
      #     version: 11               #
      - install-java-maven
      - install-xml-cli-tool
      - run:
          name: Start EHRbase server
          background: true
          command: |
            ls -la
            cd ehrbase
            EHRbase_VERSION=$(xmlstarlet sel -t -m "/_:project/_:version" -v .   pom.xml )
            echo ${EHRbase_VERSION}
            java17 -jar application/target/application-${EHRbase_VERSION}.jar --cache.enabled=true > log


  run-robot-tests:
    description: Run integration tests written in Robot Framework
    parameters:
      sut:
        description: SUT - System Under Test Config
        enum: ["DEV", "DEV -v AUTH_TYPE:OAUTH", "ADMIN-DEV", "TEST", "TEST -v AUTH_TYPE:OAUTH", "ADMIN-TEST"]
        default: "DEV"
        type: enum

      nodename:
        description: | 
          EHRbase's "CREATING_SYSTEM_ID". It can be set from cli when starting server .jar, i.e.:
          `java -jar application.jar --server.nodename=local.ehrbase.org`
        default: "circleci.ehrbase.org"
        type: string

      allow-template-overwrite:
        description:  Sets EHRbase's cli option `--system.allow-template-overwrite=true`
        default: true
        type: boolean

      cache-enabled:
        description: Sets EHRbase's cli option `--cache.enabled=true`
        default: true
        type: boolean

      include-tags:
        description: Which tests to inclue by TAGs (Robot syntax applies!)
        type: string

      test-suite-path:
        description: Target test-suite given by it's folder name e.g. COMPOSITION_TESTS
        default: ""
        type: string

      test-suite-name:
        description: Titel of generated Robot Log/Report.html
        type: string
    steps:
      # - cache-out-python-requirements
      - install-xml-cli-tool
      - install-java-maven
      - install-python3-requirements
      - run:
          name: START EHRBASE SERVER AND EXECUTE ROBOT TESTS
          no_output_timeout: 30m
          command: |
            echo "SUT: $SUT"
            echo "ADMINAPI_ACTIVE: $ADMINAPI_ACTIVE"
            echo "SECURITY_AUTHTYPE: $SECURITY_AUTHTYPE"
            echo "OAUTH_RESRCSERVER_URL: $SPRING_SECURITY_OAUTH2_RESOURCESERVER_JWT_ISSUERURI"
            cd ehrbase/
            ls -la
            if [ "${SUT}" != "TEST" ]; then
              EHRbase_VERSION=$(xmlstarlet sel -t -m "/_:project/_:version" -v .   pom.xml )
              echo ${EHRbase_VERSION}
              java17 -jar "application/target/application-${EHRbase_VERSION}.jar" \
                   --system.allow-template-overwrite=<< parameters.allow-template-overwrite >> \
                   --server.nodename=<< parameters.nodename >> \
                   --cache.enabled=<< parameters.cache-enabled >> > log & app_pid=$!
              if ! tail -f log | timeout 30s grep -m 1 "Started EhrBase in"; then
                echo "WARNING: Did not see a startup message even after waiting 30s" >&2
                if kill -0 "$app_pid"; then
                  echo "...although EHRbase is still running" >&2
                else
                  echo "...and EHRbase did not successfully start" >&2
                fi
              fi
            fi
            jps
            cd ~/projects/ehrbase/tests
            robot --include << parameters.include-tags >> \
                  --skip TODO --skip future -e obsolete -e libtest \
                  --skiponfailure not-ready \
                  --console dotted \
                  --loglevel TRACE \
                  --flattenkeywords for \
                  --flattenkeywords foritem \
                  --flattenkeywords name:_resources.* \
                  --outputdir results/<< parameters.test-suite-name >> \
                  --timestampoutputs \
                  --name << parameters.test-suite-name >> \
                  -v SUT:<< parameters.sut >> \
                  -v NODENAME:<< parameters.nodename >> \
                  -v ALLOW-TEMPLATE-OVERWRITE:<< parameters.allow-template-overwrite >> \
                  robot/<< parameters.test-suite-path >>
      # - cache-in-python-requirements
      - save-test-results-folder:
          suite-results-folder-name: << parameters.test-suite-name >>
      - store_test_results:
          path: ~/projects/ehrbase/tests/results/
      - store_artifacts:
          path: ~/projects/ehrbase/tests/results/


  configure-python-version:
    description: Configure Python version to 3.7.0
    steps:
      - run:
          name: Configure Python version to 3.7.0
          command: |
            pyenv global 3.7.0


  install-python-requirements:
    description: Install Python requirements
    steps:
      # - cache-out-python-requirements
      - run:
          name: Install Python requirements
          command: |
            python --version
            python -c "import site; print(site.getsitepackages())"
            pip install -r ~/projects/ehrbase/tests/requirements.txt
      # - cache-in-python-requirements


  cache-in-python-requirements:
    description: Save all caches in interation tests job
    steps:
      - run:
          when: always
          name: Save PIP cache
          command: |
            ls -la ~/.cache
            ls -la /opt/circleci/
      - save_cache:
          key: pip-v1-{{ checksum "~/projects/ehrbase/tests/requirements.txt" }}
          paths:
            # - ~/.cache/pip
            - /opt/circleci/.pyenv/versions/3.7.0/lib/python3.7/site-packages


  cache-out-python-requirements:
    description: Restore all caches in interation tests job
    steps:
      - restore_cache:
          keys:
            - pip-v1-


  save-test-results-folder:
    description: Persist Robot tests folder to workspace
    parameters:
      suite-results-folder-name:
        description: Titel of generated Robot Outputs
        type: string
    steps:
      - run:
          name: PERSIST ROBOT TEST RESULTS
          when: always
          command: echo "persist test results"
      - persist_to_workspace:
          root: /home/circleci
          paths:
            - projects/ehrbase/tests/results/<< parameters.suite-results-folder-name >>


  restore-test-results-folder:
    description: Attach Robot tests folder back to workspace
    steps:
      - attach_workspace:
          at: /home/circleci/


  merge-robot-outputs:
    description: Merge Robot Results from Parallel Tests
    steps:
      - run:
          command: |
            pip install robotframework==v4.0.3
      - run:
          name: POST PROCESS & MERGE TEST RESULTS
          when: always
          command: |
            cd ehrbase/tests

            # Create Log/Report with ALL DETAILS
            rebot --outputdir results/0 \
                  --name EHRbase \
                  -e obsolete -e libtest \
                  --removekeywords for \
                  --removekeywords wuks \
                  --loglevel TRACE \
                  --output EHRbase-output.xml \
                  --log EHRbase-log.html \
                  --report EHRbase-report.html \
                  results/*/*.xml
      - run:
          name: GENERATE TEST SUMMARY
          when: always
          command: |
            cd ehrbase/tests

            # Create JUNIT report from merged results
            rebot --outputdir results/robot-tests \
                  -e obsolete -e libtest \
                  --xunit junit-output.xml --xunitskipnoncritical \
                  --log NONE \
                  --report NONE \
                  results/0/EHRbase-output.xml
      - save-test-results-folder:
          suite-results-folder-name: "0"
      - store_test_results:
          path: ~/projects/ehrbase/tests/results/
      - store_artifacts:
          path: ~/projects/ehrbase/tests/results/





# ///////////////////////////////////////////////////////////////////////////
# /// CIRCLECI META                                                       ///
# ///////////////////////////////////////////////////////////////////////////


orbs:
  maven: circleci/maven@1.0.1
  openjdk-install: cloudesire/openjdk-install@1.2.3
  sonarcloud: sonarsource/sonarcloud@1.0.2

executors:
  docker-python3:
    working_directory: ~/projects
    docker:
      - image: cimg/python:3.8.14-node
    environment:
      BASH_ENV: /etc/bash.bashrc
    shell: /bin/bash -l -i -eo pipefail

  docker-py3-postgres:
    working_directory: ~/projects
    docker:
      - image: cimg/python:3.8.14-node
      - image: ehrbase/ehrbase-postgres:13.4.v2
        environment:
          POSTGRES_USER: postgres
          POSTGRES_PASSWORD: postgres
    environment:
      BASH_ENV: /etc/bash.bashrc
    shell: /bin/bash -l -i -eo pipefail

  machine-ubuntu-2004:
    description: |
      Ubuntu 20.04 VM (machine executor)
      - openjdk 1.8
      - openjdk 11.0.8 (default)
      - maven 3.6.3
      - gradle 6.6
      - python 2.7.17
      - python 3.8.5
      - pip/pip3
      - docker 19.03.12
      - docker-compose 1.26.2
      - aws-cli 2.0.43
      - google cloud sdk 307.0.0
      - heroku 7.42.12
      - chrome 85.0.4183
      - chromedriver 85.0.4183
      - firefox 80.0.0
      - go 1.15
      - leiningen 2.9.4
      - node 12.18.3 (default)
      - node 14.8.0
      - ruby 2.7.1
      - sbt 1.3.13
      - yarn 1.22.4
    working_directory: ~/projects
    # working_directory: /mnt/ramdisk      # TODO: @wlad TEST THIS FOR POSSIBLE
    environment:                           #             SPEED IMPROVEMENT !!!
      PIPELINE_ID: << pipeline.id >>
      BRANCH_NAME: << pipeline.git.branch >>
      BASH_ENV: /etc/bash.bashrc
    shell: /bin/bash -l -i -eo pipefail
    machine:
      image: ubuntu-2004:202008-01










# oooooooooo.        .o.         .oooooo.   oooo    oooo ooooo     ooo ooooooooo.
# `888'   `Y8b      .888.       d8P'  `Y8b  `888   .8P'  `888'     `8' `888   `Y88.
#  888     888     .8"888.     888           888  d8'     888       8   888   .d88'
#  888oooo888'    .8' `888.    888           88888[       888       8   888ooo88P'
#  888    `88b   .88ooo8888.   888           888`88b.     888       8   888
#  888    .88P  .8'     `888.  `88b    ooo   888  `88b.   `88.    .8'   888
# o888bood8P'  o88o     o8888o  `Y8bood8P'  o888o  o888o    `YbodP'    o888o
#
# [ BACKUP ]

  # Example-how-to-use-INSTALL-JAVA11-ORB:
  #   executor: machine-ubuntu-2004
  #   steps:
  #     - run: echo "run integration tests job mock"
  #     - openjdk-install/openjdk:
  #         version: 11
  #     - restore-ehrbase-workspace
  #     - run-robot-tests:
  #         include-tags: "CONTRIBUTION"
  #         test-suite-path: "CONTRIBUTION_TESTS"
  #         test-suite-name: "CONTRIBUTION"



  # force-ehrbase-build-to-use-local-sdk-version:
  #   steps:
  #     - run: sudo apt install maven -y
  #     - run:
  #         name: Adjust SDK version number in EHRbase's pom
  #         description: |
  #           We have to provide the version of locally build openEHR_SDK in EHRbase's POM
  #           to make sure that EHRbase builds succesfully w/ latest changes applied to the SDK.
  #           "mvn versions:set-property" is an simple way to achieve exactly that. Ufortunately
  #           it triggers a check for SDK dependency updates from jitpack.io
  #           which can take up to 15 minutes!

  #           Using Maven's -o (for offline) flag can help to prevent check for update but
  #           it fails when dependencies are not cached first.
  #           After caching dependencies it works but not 100% reliable.

  #           As a more robust solution install xmlstarlet (a cli tool to handle XML) and
  #           use it as a fallback if the 'mvn -o' approach starts to fail.
  #         command: |
  #           SDK_VERSION=$(cat ~/projects/SDK_VERSION)
  #           echo $SDK_VERSION
  #           cd ~/projects/ehrbase
  #           mvn versions:set-property -Dproperty=ehrbase.sdk.version -DnewVersion=$SDK_VERSION -o



  # command-check-commit-message-contains-string:
  #   steps:
  #     - run:
  #         name: Check if commit message contains 'some-string'
  #         command: |
  #           if [[ ${last_commit} == *[some-string]* ]]
  #           then
  #             # Generate and publish API docs
  #           fi

  #           if [[ ${last_commit} == *"minor"* ]]; then echo hello wlad; fi

  #           STR='GNU/Linux is an operating system'
  #           SUB='Linux'

  #           case $STR in

  #             *"$SUB"*)
  #               echo -n "It's there."
  #               ;;
  #           esac



  #   save-jacoco-unit-coverage:
  #   steps:
  #     - run:
  #         name: Save Jacoco code coverage (unit tests)
  #         command: |
  #           mkdir -p ~/code-coverage/
  #           cp -r test-coverage/target/site/jacoco-ut-coverage ~/code-coverage/
  #     - store_artifacts:
  #         path: ~/code-coverage/jacoco-ut-coverage

  # save-jacoco-integration-coverage:
  #   steps:
  #     - run:
  #         name: Save Jacoco code coverage (overall & integration tests)
  #         command: |
  #           mkdir -p ~/code-coverage/
  #           cp -r test-coverage/target/site/jacoco-it-coverage ~/code-coverage/
  #           cp -r test-coverage/target/site/jacoco-overall-coverage ~/code-coverage/
  #     - store_artifacts:
  #         path: ~/code-coverage/jacoco-it-coverage

  # save-jacoco-overall-coverage:
  #   steps:
  #     - run:
  #         name: Save Jacoco's overall code coverage report (w/ unit & integr. tests)
  #         command: |
  #           mkdir -p ~/code-coverage/
  #           cp -r test-coverage/target/site/jacoco-overall-coverage ~/code-coverage/
  #     - store_artifacts:
  #         path: ~/code-coverage/jacoco-overall-coverage
  #     # - persist_to_workspace:
  #     #     root: /home/circleci
  #     #     paths:
  #     #       - code-coverage/jacoco-overall-coverage
